/*
Copyright 2019-2020 vChain, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

package immudb.schema;

option go_package = "github.com/codenotary/immudb/pkg/api/schema";

message Key {
	bytes key = 1;
}

message Permission{
	string database = 1;
	uint32 permission = 2;
}

message User {
	bytes user = 1;
	repeated Permission permissions = 3;
	string createdby = 4;
	string createdat = 5;
	bool active = 6;
}

message UserList {
	repeated User users = 1;
}

message CreateUserRequest {
	bytes user = 1;
	bytes password = 2;
	uint32 permission = 3;
	string database = 4;
}

message UserRequest {
	bytes user = 1;
}

message ChangePasswordRequest {
	bytes user = 1;
	bytes oldPassword = 2;
	bytes newPassword = 3;
}

message LoginRequest {
	bytes user = 1;
	bytes password = 2;
}

message LoginResponse {
	string token = 1;
	bytes warning = 2;
}

message AuthConfig {
	uint32 kind = 1;
}

message MTLSConfig {
	bool enabled = 1;
}

message Node {
	bytes i = 1;
	bytes h = 2;
	bytes refk = 3;
	bool ref = 4;
	bool cache = 5;
	bool root = 6;
}

message Layer {
	repeated Node l = 1;
}

message Tree{
	repeated Layer t = 1;
}

////////////////////////////////////////////////////////

message KeyValue {
	bytes key = 1;
	bytes value = 2;
}

message Item {
	uint64 tx = 1;
	bytes key = 4;
	bytes value = 5;
}

message Op {
	oneof operation {
		KeyValue kv = 1;
		ZAddRequest zAdd = 2;
		ReferenceRequest ref = 3;
	}
}

message ExecAllRequest {
	repeated Op Operations = 1;
	uint64 sinceTx = 2;
}

message ItemList {
	repeated Item items = 1;
}

message ZItem {
	bytes set = 1;
	bytes key = 2;
	Item item = 3;
	double score = 4;
	uint64 atTx = 5;
}

message ZItemList {
	repeated ZItem items = 1;
}

message ScanRequest {
	bytes seekKey = 1;
	bytes prefix = 2;
	bool desc = 3;
	uint64 limit = 4;
	uint64 sinceTx = 5;
}

message KeyPrefix {
	bytes prefix = 1;
}

message ItemsCount {
	uint64 count = 1;
}

///////////////

message Signature {
	bytes publicKey = 1;
	bytes signature = 2;
}

message TxMetadata {
	uint64 id = 1;
	bytes prevAlh = 2;
	int64 ts = 3;
	int32 nentries = 4;
	bytes eH = 5;
	uint64 blTxId = 6;
	bytes blRoot = 7;
}

message LinearProof {
	uint64 sourceTxId = 1;
	uint64 TargetTxId = 2;
	repeated bytes terms = 3;
}

message DualProof {
	TxMetadata sourceTxMetadata = 1;
	TxMetadata targetTxMetadata = 2;

	repeated bytes inclusionProof = 3;
	repeated bytes consistencyProof = 4;

	bytes targetBlTxAlh = 5;
	repeated bytes lastInclusionProof = 6;

	LinearProof linearProof = 7;
}

message Tx {
	TxMetadata metadata = 1;
	repeated TxEntry entries = 2;
}

message TxEntry {
	bytes key = 1;
	bytes hValue = 2;
	int64 vOff = 3;
	int32 vLen = 4;
}

message VerifiableTx {
	Tx tx = 1;
	DualProof dualProof = 2;
	Signature signature = 3;
}

//////////////////

message VerifiableItem {
	Item item = 1;
	VerifiableTx verifiableTx = 2;
	InclusionProof inclusionProof = 3;
}

message InclusionProof {
	int32 leaf = 1;
	int32 width = 2;
	repeated bytes terms = 3;
}

message SetRequest {
	repeated KeyValue KVs = 1;
}

message KeyRequest {
	bytes key = 1;
	uint64 sinceTx = 2;
}

message KeyListRequest {
	repeated bytes keys = 1;
	uint64 sinceTx = 2;
}

message VerifiableSetRequest {
	SetRequest setRequest = 1;
	uint64 proveSinceTx = 2;
}

message VerifiableGetRequest {
	KeyRequest keyRequest = 1;
	uint64 proveSinceTx = 2;
}

message HealthResponse {
	bool status = 1;
	string version = 2;
}

message ImmutableState {
	uint64 txId = 3;
	bytes txHash = 4;
	Signature signature = 5;
}

message ReferenceRequest {
	bytes reference = 1;
	bytes key = 2;
	uint64 atTx = 3;
	uint64 sinceTx = 4;
}

message VerifiableReferenceRequest {
	ReferenceRequest referenceRequest = 1;
	uint64 proveSinceTx = 2;
}

message ZAddRequest {
	bytes set = 1;
	double score = 2;
	bytes key = 3;
	uint64 atTx = 4;
	uint64 sinceTx = 5;
}

message Score {
	double score = 1;
}

message ZScanRequest {
	bytes set = 1;
	bytes seekKey = 2;
	double seekScore = 3;
	uint64 seekAtTx = 4;
	uint64 limit = 5;
	bool desc = 6;
	Score minScore = 7;
	Score maxScore = 8;
	uint64 sinceTx = 9;
}

message HistoryRequest {
	bytes key = 1;
	uint64 offset = 2;
	uint64 limit = 3;
	bool desc = 4;
	uint64 sinceTx = 5;
}

message VerifiableZAddRequest {
	ZAddRequest zAddRequest = 1;
	uint64 proveSinceTx = 2;
}

message TxRequest {
	uint64 tx = 1;
}

message VerifiableTxRequest {
	uint64 tx = 1;
	uint64 proveSinceTx = 2;
}

message Database {
	string databasename = 1;
}

message UseDatabaseReply{
	string token = 1;
}

enum PermissionAction {
	GRANT = 0;
	REVOKE = 1;
}

message ChangePermissionRequest {
	PermissionAction action = 1;
	string username = 2;
	string database = 3;
	uint32 permission = 4;
}

message SetActiveUserRequest {
	bool active = 1;
	string username = 2;
}

message DatabaseListResponse{
	repeated Database databases = 1;
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "immudb REST API";
		description: "<b>IMPORTANT</b>: All <code>get</code> and <code>safeget</code> functions return <u>base64-encoded</u> keys and values, while all <code>set</code> and <code>safeset</code> functions expect <u>base64-encoded</u> inputs."
	};
	security_definitions: {
		security: {
			key: "bearer"
			value: {
				type: TYPE_API_KEY
				in: IN_HEADER
				name: "Authorization"
				description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
		}
	}
	security: {
		security_requirement: {
			key: "bearer"
		}
	}
};

// immudb gRPC & REST service
// IMPORTANT: All get and safeget functions return base64-encoded keys and values, while all set and safeset functions expect base64-encoded inputs.
service ImmuService {
	rpc ListUsers (google.protobuf.Empty) returns (UserList){
		option (google.api.http) = {
			get: "/v1/immurestproxy/user/list"
		};
	};

	rpc CreateUser (CreateUserRequest) returns (google.protobuf.Empty){
		option (google.api.http) = {
			post: "/v1/immurestproxy/user"
			body: "*"
		};
	};

	rpc ChangePassword (ChangePasswordRequest) returns (google.protobuf.Empty){
		option (google.api.http) = {
			post: "/v1/immurestproxy/user/password/change"
			body: "*"
		};
	};

	rpc UpdateAuthConfig (AuthConfig) returns (google.protobuf.Empty){}
	rpc UpdateMTLSConfig (MTLSConfig) returns (google.protobuf.Empty){}

	rpc PrintTree (google.protobuf.Empty) returns (Tree){}

	rpc Login (LoginRequest) returns (LoginResponse){
		option (google.api.http) = {
			post: "/v1/immurestproxy/login"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {} // no security
		};
	};

	rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty){
		option (google.api.http) = {
			post: "/v1/immurestproxy/logout"
			body: "*"
		};
	};

	rpc Set (SetRequest) returns (TxMetadata){
		option (google.api.http) = {
			post: "/v1/immurestproxy/set"
			body: "*"
		};
	};

	rpc VerifiableSet (VerifiableSetRequest) returns (VerifiableTx){
		option (google.api.http) = {
			post: "/v1/immurestproxy/verifiable/set"
			body: "*"
		};
	};

	rpc Get (KeyRequest) returns (Item){
		option (google.api.http) = {
			get: "/v1/immurestproxy/item/{key}"
		};
	};

	rpc VerifiableGet (VerifiableGetRequest) returns (VerifiableItem){
		option (google.api.http) = {
			post: "/v1/immurestproxy/item/verifiable/get"
			body: "*"
		};
	};

	rpc GetAll (KeyListRequest) returns (ItemList){
		option (google.api.http) = {
			post: "/v1/immurestproxy/batch/get"
			body: "*"
		};
	};

	rpc ExecAll (ExecAllRequest) returns (TxMetadata) {
		option (google.api.http) = {
			post: "/v1/immurestproxy/batch/atomic/set"
			body: "*"
		};
	};

	rpc Scan(ScanRequest) returns (ItemList){
		option (google.api.http) = {
			post: "/v1/immurestproxy/item/scan"
			body: "*"
		};
	};

	rpc Count(KeyPrefix) returns (ItemsCount){
		option (google.api.http) = {
			get: "/v1/immurestproxy/item/count/{prefix}"
		};
	};

	rpc CountAll(google.protobuf.Empty) returns (ItemsCount){
		option (google.api.http) = {
			get: "/v1/immurestproxy/item/countall"
		};
	};

	rpc TxById(TxRequest) returns (Tx){
		option (google.api.http) = {
			get: "/v1/immurestproxy/item/index/{tx}"
		};
	};

	rpc VerifiableTxById(VerifiableTxRequest) returns (VerifiableTx){
		option (google.api.http) = {
			get: "/v1/immurestproxy/item/safe/index/{tx}"
		};
	};

	rpc History(HistoryRequest) returns (ItemList){
		option (google.api.http) = {
			post: "/v1/immurestproxy/history"
			body: "*"
		};
	};

	rpc Health (google.protobuf.Empty) returns (HealthResponse){
		option (google.api.http) = {
			get: "/v1/immurestproxy/healthresponse"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {} // no security
		};
	};

	rpc CurrentState (google.protobuf.Empty) returns (ImmutableState){
		option (google.api.http) = {
			get: "/v1/immurestproxy/healthresponse"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			security: {} // no security
		};
	};

	rpc SetReference (ReferenceRequest) returns (TxMetadata){
		option (google.api.http) = {
			post: "/v1/immurestproxy/reference"
			body: "*"
		};
	};

	rpc VerifiableSetReference (VerifiableReferenceRequest) returns (VerifiableTx){
		option (google.api.http) = {
			post: "/v1/immurestproxy/safe/reference"
			body: "*"
		};
	};

	rpc ZAdd (ZAddRequest) returns (TxMetadata){
		option (google.api.http) = {
			post: "/v1/immurestproxy/zadd"
			body: "*"
		};
	};

	rpc VerifiableZAdd (VerifiableZAddRequest) returns (VerifiableTx){
		option (google.api.http) = {
			post: "/v1/immurestproxy/safe/zadd"
			body: "*"
		};
	};

	rpc ZScan (ZScanRequest) returns (ZItemList){
		option (google.api.http) = {
			post: "/v1/immurestproxy/zscan"
			body: "*"
		};
	};

	rpc CreateDatabase(Database) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/v1/immurestproxy/createdatabase"
			body: "*"
		};
	}

	rpc UseDatabase(Database) returns (UseDatabaseReply) {
		option (google.api.http) = {
			get: "/v1/immurestproxy/usedatabase/{databasename}"
		};
	}

	rpc ChangePermission(ChangePermissionRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post: "/v1/immurestproxy/changepermission"
			body: "*"
		};
	}

	rpc SetActiveUser (SetActiveUserRequest) returns (google.protobuf.Empty){
		option (google.api.http) = {
			post: "/v1/immurestproxy/user/setactiveUser"
			body: "*"
		};
	};

	rpc DatabaseList (google.protobuf.Empty) returns (DatabaseListResponse){
		option (google.api.http) = {
			post: "/v1/immurestproxy/user/databaselist"
			body: "*"
		};
	};
}
